#!/usr/bin/env bash

# Copyright 03/26/2016 Aaron Caffrey https://github.com/wifiextender

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.

# Adjust those variables
DECRYPTED_FILES="$HOME/Documents/Private"
ENCRYPTED_FILES="$HOME/encrypted_files"
PASSWORD_FILE='/tmp/pws'
SKILCRYPT_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
FILE_TO_TRACK_CHANGES="${SKILCRYPT_HOME}"/skilcrypt/file_db


### Don't touch anything below this line ###
[[ ! -d "${DECRYPTED_FILES}" ]] && mkdir --parents --mode=700 "${DECRYPTED_FILES}"
[[ ! -d "${ENCRYPTED_FILES}" ]] && mkdir --parents --mode=700 "${ENCRYPTED_FILES}"
[[ ! -d "${FILE_TO_TRACK_CHANGES}" ]] && \
    mkdir --parents --mode=700 "${FILE_TO_TRACK_CHANGES%/*}"
[[ ! -f "${PASSWORD_FILE}" ]] && { printf '%s\n' 'Missing password file'; exit 1 ;}

declare -a _check_lockfile_db1
declare -a _check_lockfile_db2
declare -a _file_in_copy_arr
declare -a _check_filez_two
declare -a _check_filez
declare -a _new_size
declare -a _fdb_arr

_fdb="${FILE_TO_TRACK_CHANGES}"
_fdb_two="${_fdb}".bak

IFS=$'\n'

__is_file_in_copy() {
    for y in {1..5}
    do
        sleep 1
        _file_in_copy_arr[${y}]=$(date -r "${2}" +%F%R%S)
    done

    [[ "${1}" == 'db1' ]] && _check_lockfile_db1=("${_file_in_copy_arr[@]}") || \
        _check_lockfile_db2=("${_file_in_copy_arr[@]}")
}

__refresh_db() {

    [[ -f "${_fdb}" ]] && {
        cp -r "${_fdb}" "${_fdb_two}"
        first_init='nope'
    }

    find "${DECRYPTED_FILES}" -type f ! -name "*.gpg" | {
        while read x
        do
            echo "${x};`stat -c %s ${x}`" >> "${_fdb}"
        done

        [[ ! -z "${first_init}" ]] && {
            diff -Nwaur "${_fdb}" "${_fdb_two}" | \
                gawk '/^+/ {if (NR > 3) {gsub("+",""); print $0 }}' >> "${_fdb}"
            sort --field-separator=';' --key=1,1 --unique "${_fdb}" --output="${_fdb}".temp
            mv "${_fdb}".temp "${_fdb}"
        }
    }
}

while true
do

    _check_filez=(`find "${ENCRYPTED_FILES}" -type f -name "*.gpg"`)
    [[ -z "${_check_filez[@]}" ]] && {
        find "${DECRYPTED_FILES}" -type f ! -name "*.gpg" | {
            while read x
            do
                [[ ! -f "${x}" ]] && continue

                _new_place="${x/${DECRYPTED_FILES}/${ENCRYPTED_FILES}}"
                [[ ! -d "${_new_place%/*}" ]] && mkdir --parents --mode=700 "${_new_place%/*}"

                gpg --batch --quiet --yes --passphrase-file "${PASSWORD_FILE}" \
                --cert-digest-algo SHA512 --cipher-algo AES256 \
                --digest-algo SHA512 --s2k-cipher-algo AES256 --s2k-digest-algo SHA512 \
                --s2k-mode 3 --s2k-count 64981052 --compress-algo 0 \
                 --output "${_new_place}".gpg --symmetric "${x}"
            done

            __refresh_db
        }
    }

    _check_filez_two=(`find "${DECRYPTED_FILES}" -type f ! -name "*.gpg"`)
    [[ -z "${_check_filez_two[@]}" ]] && [[ ! -z "${_check_filez[@]}" ]] && {
        find "${ENCRYPTED_FILES}" -type f -name "*.gpg" | {
            while read x
            do
                [[ ! -f "${x}" ]] && continue

                _new_place="${x/${ENCRYPTED_FILES}/${DECRYPTED_FILES}}"
                [[ ! -d "${_new_place%/*}" ]] && mkdir --parents --mode=700 "${_new_place%/*}"

                gpg --batch --quiet --yes --passphrase-file "${PASSWORD_FILE}" \
                    --output "${_new_place%.gpg}" "${x}"
            done

            __refresh_db
        }
    }

    [[ ! -f "${_fdb}" ]] && {
        __refresh_db
        sleep 1
        continue
    } || __refresh_db

    _fdb_arr=(`<${_fdb}`)

    for z in "${_fdb_arr[@]}"
    do
        x="${z%;*}"
        str_to_delete="${z//\//\\\/}"     # / to \/
        _new_place="${x/${DECRYPTED_FILES}/${ENCRYPTED_FILES}}"

        _lock_file="${x//\//.}"
        _lock_file="/tmp/${_lock_file// /.}-lock"

        [[ ! -f "${x}" ]] && {
            rm -rf "${_new_place}".gpg
            sed -i "/${str_to_delete}/d" "${_fdb}"
            [[ -f "${_lock_file}" ]]  && rm -rf "${_lock_file}"
            continue
        }

        _da_size_in_db="${z##*;}"
        _da_size_now="$(stat -c %s ${x})"

        [[ "${_da_size_in_db}" != "${_da_size_now}" ]] && {
            touch "${_lock_file}"

            __is_file_in_copy 'db1'  "${x}"
            __is_file_in_copy 'db2'  "${x}"

            [[ " ${_check_lockfile_db1[@]} " =~ " ${_check_lockfile_db2[@]} " ]] \
                && {
                    rm -rf "${_lock_file}"
                    sed -i "\$a${x};`stat -c %s ${x}`" "${_fdb}"
                    sed -i "s|${x};${_da_size_in_db}|${x};`stat -c %s ${x}`|g" "${_fdb}"
                } || continue

        } || [[ ! -f "${_new_place}".gpg ]] && [[ ! -f "${_lock_file}" ]] && {

            for y in {1..5}
            do
                sleep 0.2
                _new_size[${y}]=$(stat -c %s "${x}")
            done

            [[ ! " ${_new_size[@]} " =~ " ${_da_size_now} " ]] && {
                touch "${_lock_file}"
                continue
            }

            [[ ! -d "${_new_place%/*}" ]] && mkdir --parents --mode=700 "${_new_place%/*}"

            gpg --batch --quiet --yes --passphrase-file "${PASSWORD_FILE}" \
            --cert-digest-algo SHA512 --cipher-algo AES256 \
            --digest-algo SHA512 --s2k-cipher-algo AES256 --s2k-digest-algo SHA512 \
            --s2k-mode 3 --s2k-count 64981052 --compress-algo 0 \
             --output "${_new_place}".gpg --symmetric "${x}"

            [[ $? == 0 ]] && [[ " ${_new_size[@]} " =~ " `stat -c %s ${x}` " ]] && {
                sed -i "\$a${x};`stat -c %s ${x}`" "${_fdb}"
                sed -i "s|${x};${_da_size_in_db}|${x};`stat -c %s ${x}`|g" "${_fdb}"
            }
        }

    done

    sleep 1

done
unset PASSWORD_FILE
unset IFS
